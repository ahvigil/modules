nextflow_process {
    name "Test Process BEDTOOLS_CLOSEST"
    script "../main.nf"
    process "BEDTOOLS_CLOSEST"

    tag "modules"
    tag "modules_nfcore"
    tag "bedtools"
    tag "bedtools/closest"

    test("test_bedtools_closest") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true),
                    [
                        file(params.test_data['homo_sapiens']['genome']['genome_multi_interval_bed'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                    ]
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_bedtools_closest_fasta_fai") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_multi_interval_bed'], checkIfExists: true)
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_bedtools_closest_vcf") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true),
                    [
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['genome']['gnomad_r2_1_1_vcf_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
